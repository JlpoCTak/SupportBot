import logging
from loader import db
from aiogram.filters import Command
from aiogram import F
from aiogram import Router
from aiogram import types
from bot.keyboards.admins import admin_panel
from bot.filters.admin import IsAdmin
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()


class Actions(StatesGroup):
    usual = State()
    add_sup = State()
    del_sup = State()


@router.message(Command('adminpanel'), IsAdmin())
async def main_panel(msg: types.Message, state: FSMContext):
    try:
        cid = msg.from_user.id  # The ID of the admin who initiated the action
        mid = msg.message_id  # The ID of the message to be updated
        chatid = msg.chat.id
        # Translate the greeting message
        text = "üë©‚Äçüíª–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"

        # Edit the message with the translated text and update it with the main admin panel buttons
        await msg.answer(text, reply_markup=admin_panel())

    except Exception as err:
        # Log any errors that occur during execution
        logging.error(err)


@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–∞–ø–ø–æ—Ä—Ç–∞', IsAdmin())
async def tell_username_add_sup(msg: types.Message, state: FSMContext):
    await state.set_state(Actions.add_sup)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å –∑–Ω–∞–∫–æ–º \'@\'')


@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å —Å–∞–ø–ø–æ—Ä—Ç–∞', IsAdmin())
async def tell_username_del_support(msg: types.Message, state: FSMContext):
    await state.set_state(Actions.del_sup)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å –∑–Ω–∞–∫–æ–º \'@\'')


@router.message(F.text.startswith('@'), IsAdmin(), Actions.add_sup)
async def add_support(msg: types.Message, state: FSMContext):
    username_to_add = msg.text[1:]
    with db as connection:
        cursor = connection.cursor()
        data_user = cursor.execute('Select * From Users Where telegram_user_username = ?',
                                   (username_to_add,)).fetchall()
        if data_user == []:
            await msg.answer('–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n'
                             '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å\"')
            await msg.answer_photo(photo=types.FSInputFile('databases/img/qr.png'))
        else:
            data_user = [x for x in data_user[0]]
            cursor.execute(
                'Insert Into Supports (telegram_user_fullname, telegram_user_username, telegram_user_id)'
                ' Values (?, ?, ?)',
                (data_user[1], data_user[2], data_user[3],))
            await msg.answer('–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
            connection.commit()

    await state.set_state(Actions.usual)


@router.message(F.text.startswith('@'), IsAdmin(), Actions.del_sup)
async def add_support(msg: types.Message, state: FSMContext):
    username_to_del = msg.text[1:]
    with db as connection:
        cursor = connection.cursor()
        data_user = cursor.execute('Select * From Supports Where telegram_user_username = ?',
                                   (username_to_del,)).fetchall()
        if data_user == []:
            await msg.answer('–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n'
                             '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
        else:
            data_user = [x for x in data_user[0]]
            cursor.execute(
                'Delete From Supports Where telegram_user_username = ?',
                (username_to_del,))
            await msg.answer('–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω')
            connection.commit()

    await state.set_state(Actions.usual)
